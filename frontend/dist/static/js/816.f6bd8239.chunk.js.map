{"version":3,"file":"static/js/816.f6bd8239.chunk.js","mappings":"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","sources":["helpers/seismic/getAcceleration.tsx","helpers/seismic/getVelocity.tsx","helpers/seismic/getVoltage.tsx","helpers/utils/getTimeString.tsx","views/Realtime/setADC.tsx","views/Realtime/setGeophone.tsx","helpers/request/websocketByTag.tsx","views/Realtime/setBanner.tsx","views/Realtime/setAreas.tsx","views/Realtime/setStation.tsx","views/Realtime/index.tsx"],"sourcesContent":["const getAcceleration = (data: number[], interval: number): number[] => {\r\n    const acceleration = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (!i) {\r\n            acceleration.push(0);\r\n            continue;\r\n        }\r\n\r\n        acceleration.push((data[i] - data[i - 1]) / interval);\r\n    }\r\n\r\n    return acceleration;\r\n};\r\n\r\nexport default getAcceleration;\r\n","const getVelocity = (\r\n    data: number[],\r\n    sensitivity: number\r\n): number[] => {\r\n    const velocity: number[] = [];\r\n    for (let i of data) {\r\n        velocity.push(i / sensitivity);\r\n    }\r\n\r\n    return velocity;\r\n};\r\n\r\nexport default getVelocity;\r\n","const getVoltage = (\r\n    arr: number[],\r\n    resolution: number,\r\n    fullscale: number\r\n): number[] => {\r\n    const factor = 2 ** (resolution - 1);\r\n    const voltage: number[] = [];\r\n    for (let i of arr) {\r\n        voltage.push((fullscale / factor) * i);\r\n    }\r\n\r\n    return voltage;\r\n};\r\n\r\nexport default getVoltage;\r\n","const getTimeString = (ts: number): string => {\r\n    const date = new Date(ts);\r\n\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const day = date.getDate().toString().padStart(2, \"0\");\r\n    const hour = date.getHours().toString().padStart(2, \"0\");\r\n    const minute = date.getMinutes().toString().padStart(2, \"0\");\r\n    const second = date.getSeconds().toString().padStart(2, \"0\");\r\n    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\r\n};\r\n\r\nexport default getTimeString;\r\n","import { ADC } from \"../../config/adc\";\r\nimport { ApiResponse } from \"../../helpers/request/restfulApiByTag\";\r\n\r\nconst setADC = (res: ApiResponse): ADC => {\r\n    const { resolution, fullscale } = res.data.adc;\r\n    return { resolution, fullscale };\r\n};\r\n\r\nexport default setADC;\r\n","import { Geophone } from \"../../config/geophone\";\r\nimport { ApiResponse } from \"../../helpers/request/restfulApiByTag\";\r\n\r\nconst setGeophone = (res: ApiResponse): Geophone => {\r\n    const { ehz, ehe, ehn } = res.data.geophone;\r\n    return { ehz, ehe, ehn };\r\n};\r\n\r\nexport default setGeophone;\r\n","import API_CONFIG from \"../../config/api\";\r\nimport getApiUrl from \"../app/getApiUrl\";\r\nimport getBackend from \"../app/getBackend\";\r\n\r\ninterface WebsocketByTag {\r\n    readonly tag: string;\r\n    readonly onOpen?: (event: Event) => void;\r\n    readonly onData: (event: MessageEvent) => void;\r\n    readonly onClose?: (event: CloseEvent) => void;\r\n    readonly onError?: (event: Event) => void;\r\n}\r\n\r\nconst websocketByTag = ({\r\n    tag,\r\n    onOpen,\r\n    onData,\r\n    onClose,\r\n    onError,\r\n}: WebsocketByTag): WebSocket | void => {\r\n    try {\r\n        const type = API_CONFIG.find((config) => config.tag === tag)?.type;\r\n        if (type !== \"ws\") {\r\n            throw new Error(\"non-websocket protocol is not supported\");\r\n        }\r\n\r\n        const uri = getApiUrl(tag);\r\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n        const websocket = new WebSocket(`${protocol}${getBackend()}${uri}`);\r\n\r\n        websocket.onmessage = onData;\r\n        websocket.onopen = onOpen || (() => {});\r\n        websocket.onclose = onClose || (() => {});\r\n        websocket.onerror = onError || (() => {});\r\n\r\n        return websocket;\r\n    } catch (err: unknown) {\r\n        if (onError) {\r\n            onError(new Event(\"error occurred\"));\r\n        }\r\n\r\n        return;\r\n    }\r\n};\r\n\r\nexport default websocketByTag;\r\n","import { BannerProps } from \"../../components/Banner\";\r\nimport { IntensityStandardProperty } from \"../../helpers/seismic/intensityStandard\";\r\nimport getTimeString from \"../../helpers/utils/getTimeString\";\r\n\r\nconst setBanner = (\r\n    message?: any,\r\n    prevTs?: number,\r\n    scale?: IntensityStandardProperty\r\n): BannerProps => {\r\n    // Parse response, empty response means error\r\n    const { ts, ehz, ehe, ehn } = message || { ts: -1, ehz: 0, ehe: 0, ehn: 0 };\r\n    const sampleLength = (ehz.length + ehe.length + ehn.length) / 3;\r\n    const sampleRate = ((1000 * sampleLength) / (ts - (prevTs || 0))).toFixed(\r\n        2\r\n    );\r\n\r\n    // Display error message if ts is -1 and all data are 0\r\n    if (ts === -1 && ehz * ehn * ehe === 0) {\r\n        return {\r\n            type: \"error\",\r\n            label: { id: \"views.realtime.banner.error.label\" },\r\n            text: { id: \"views.realtime.banner.error.text\" },\r\n        };\r\n    }\r\n\r\n    return {\r\n        type: \"success\",\r\n        label: {\r\n            id: \"views.realtime.banner.success.label\",\r\n            format: { sampleRate },\r\n        },\r\n        text: {\r\n            id: \"views.realtime.banner.success.text\",\r\n            format: {\r\n                time: getTimeString(ts),\r\n                scale: `${scale?.value} - ${scale?.name}` || \"Unknown\",\r\n            },\r\n        },\r\n    };\r\n};\r\n\r\nexport default setBanner;\r\n","import getVelocity from \"../../helpers/seismic/getVelocity\";\r\nimport getQueueArray from \"../../helpers/array/getQueueArray\";\r\nimport getVoltage from \"../../helpers/seismic/getVoltage\";\r\nimport setObjectByPath from \"../../helpers/utils/setObjectByPath\";\r\nimport { RealtimeArea } from \".\";\r\nimport getAcceleration from \"../../helpers/seismic/getAcceleration\";\r\nimport { ADC } from \"../../config/adc\";\r\nimport { Geophone } from \"../../config/geophone\";\r\nimport GLOBAL_CONFIG from \"../../config/global\";\r\nimport { IntensityStandardProperty } from \"../../helpers/seismic/intensityStandard\";\r\n\r\nconst setAreas = (\r\n    obj: RealtimeArea[],\r\n    data: any,\r\n    prevTs: number,\r\n    length: number,\r\n    adc: ADC,\r\n    gp: Geophone,\r\n    scale: IntensityStandardProperty\r\n): RealtimeArea[] => {\r\n    const { ts } = data;\r\n    for (let i of obj) {\r\n        // Get sample rate\r\n        const { ehz, ehe, ehn } = data;\r\n        let sampleRate = (ehz.length + ehe.length + ehn.length) / 3;\r\n\r\n        // Get time difference and time span\r\n        const timeDiff = prevTs !== 0 ? ts - prevTs : 1000;\r\n        const timeSpan = timeDiff / sampleRate;\r\n\r\n        // Get voltage, velocity, acceleration\r\n        const channelData = data[i.tag];\r\n        const voltage = getVoltage(channelData, adc.resolution, adc.fullscale);\r\n        const velocity = getVelocity(voltage, gp[i.tag]);\r\n        const acceleration = getAcceleration(velocity, timeSpan / timeDiff);\r\n\r\n        // Fill data queue with raw count\r\n        const srcArr = obj.find((item) => item.tag === i.tag)?.chart.series\r\n            ?.data;\r\n        const newArr = [];\r\n        for (let j = 0; j < channelData.length; j++) {\r\n            newArr.push([ts - (sampleRate - j) * timeSpan, channelData[j]]);\r\n        }\r\n\r\n        // Merge data queue with raw count\r\n        const resultArr = getQueueArray(srcArr, newArr, length * sampleRate);\r\n        setObjectByPath(obj, `[tag:${i.tag}]>chart>series>data`, resultArr);\r\n\r\n        // Get PGV, PGA\r\n        const pgv = velocity.reduce((a, b) => {\r\n            const absA = Math.abs(a);\r\n            const absB = Math.abs(b);\r\n            return Math.max(absA, absB);\r\n        }, 0);\r\n        const pga = acceleration.reduce((a, b) => {\r\n            const absA = Math.abs(a);\r\n            const absB = Math.abs(b);\r\n            return Math.max(absA, absB);\r\n        }, 0);\r\n\r\n        // Match scale standard\r\n        const { scales } = GLOBAL_CONFIG.app_settings;\r\n        const scaleStandard = scales.find(\r\n            (item) => item.property().value === scale.value\r\n        );\r\n        // Get intensity\r\n        const intensity = scaleStandard?.intensity(pgv, pga);\r\n\r\n        // Set PGV, PGA, intensity in area field\r\n        setObjectByPath(obj, `[tag:${i.tag}]>area>text`, {\r\n            id: `views.realtime.areas.${i.tag}.text`,\r\n            format: {\r\n                pga: pga.toFixed(5),\r\n                pgv: pgv.toFixed(5),\r\n                intensity: `${scale.value} ${intensity}`,\r\n            },\r\n        });\r\n    }\r\n\r\n    return obj;\r\n};\r\n\r\nexport default setAreas;\r\n","import { Station } from \"../../config/station\";\r\nimport { ApiResponse } from \"../../helpers/request/restfulApiByTag\";\r\n\r\nconst setStation = (res: ApiResponse): Station => {\r\n    const { station, network, location } = res.data?.station || {};\r\n    return { station, network, location };\r\n};\r\n\r\nexport default setStation;\r\n","import { Component } from \"react\";\r\nimport Header from \"../../components/Header\";\r\nimport Sidebar from \"../../components/Sidebar\";\r\nimport Content from \"../../components/Content\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport View from \"../../components/View\";\r\nimport Scroller from \"../../components/Scroller\";\r\nimport Banner, { BannerProps } from \"../../components/Banner\";\r\nimport Footer from \"../../components/Footer\";\r\nimport Area, { AreaProps, CollapseMode } from \"../../components/Area\";\r\nimport Container from \"../../components/Container\";\r\nimport Chart, { ChartProps } from \"../../components/Chart\";\r\nimport restfulApiByTag from \"../../helpers/request/restfulApiByTag\";\r\nimport setADC from \"./setADC\";\r\nimport setGeophone from \"./setGeophone\";\r\nimport websocketByTag from \"../../helpers/request/websocketByTag\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport setBanner from \"./setBanner\";\r\nimport setAreas from \"./setAreas\";\r\nimport { Geophone } from \"../../config/geophone\";\r\nimport { ADC } from \"../../config/adc\";\r\nimport { IntensityStandardProperty } from \"../../helpers/seismic/intensityStandard\";\r\nimport GLOBAL_CONFIG, { fallbackScale } from \"../../config/global\";\r\nimport { ReduxStoreProps } from \"../../config/store\";\r\nimport { connect } from \"react-redux\";\r\nimport { update as updateADC } from \"../../store/adc\";\r\nimport { update as updateGeophone } from \"../../store/geophone\";\r\nimport { update as updateStation } from \"../../store/station\";\r\nimport mapStateToProps from \"../../helpers/utils/mapStateToProps\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport setStation from \"./setStation\";\r\n// import * as seismograph from \"seisplotjs/src/seismograph\";\r\n// import * as seismographconfig from \"seisplotjs/src/seismographconfig\";\r\n\r\nexport interface RealtimeArea {\r\n    readonly tag: string;\r\n    readonly area: AreaProps;\r\n    readonly chart: ChartProps;\r\n}\r\n\r\ninterface RealtimeState {\r\n    readonly adc: ADC;\r\n    readonly banner: BannerProps;\r\n    readonly areas: RealtimeArea[];\r\n    readonly geophone: Geophone;\r\n    readonly scale: IntensityStandardProperty;\r\n}\r\n\r\nclass Realtime extends Component<\r\n    ReduxStoreProps & WithTranslation,\r\n    RealtimeState\r\n> {\r\n    prevTs: number;\r\n    websocket: WebSocket | null | {};\r\n    constructor(props: ReduxStoreProps & WithTranslation) {\r\n        super(props);\r\n        this.state = {\r\n            banner: {\r\n                type: \"warning\",\r\n                label: { id: \"views.realtime.banner.warning.label\" },\r\n                text: { id: \"views.realtime.banner.warning.text\" },\r\n            },\r\n            areas: [\r\n                {\r\n                    tag: \"ehz\",\r\n                    area: {\r\n                        collapse: CollapseMode.COLLAPSE_HIDE,\r\n                        label: { id: \"views.realtime.areas.ehz.label\" },\r\n                        text: {\r\n                            id: \"views.realtime.areas.ehz.text\",\r\n                            format: {\r\n                                pga: \"0.00000\",\r\n                                pgv: \"0.00000\",\r\n                                intensity: \"-\",\r\n                            },\r\n                        },\r\n                    },\r\n                    chart: {\r\n                        backgroundColor: \"#d97706\",\r\n                        lineWidth: 1,\r\n                        series: {\r\n                            name: \"EHZ\",\r\n                            type: \"line\",\r\n                            color: \"#f1f5f9\",\r\n                            data: [],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    tag: \"ehe\",\r\n                    area: {\r\n                        collapse: CollapseMode.COLLAPSE_HIDE,\r\n                        label: { id: \"views.realtime.areas.ehe.label\" },\r\n                        text: {\r\n                            id: \"views.realtime.areas.ehe.text\",\r\n                            format: {\r\n                                pga: \"0.00000\",\r\n                                pgv: \"0.00000\",\r\n                                intensity: \"-\",\r\n                            },\r\n                        },\r\n                    },\r\n                    chart: {\r\n                        backgroundColor: \"#10b981\",\r\n                        lineWidth: 1,\r\n                        series: {\r\n                            name: \"EHE\",\r\n                            type: \"line\",\r\n                            color: \"#f1f5f9\",\r\n                            data: [],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    tag: \"ehn\",\r\n                    area: {\r\n                        collapse: CollapseMode.COLLAPSE_HIDE,\r\n                        label: { id: \"views.realtime.areas.ehn.label\" },\r\n                        text: {\r\n                            id: \"views.realtime.areas.ehn.text\",\r\n                            format: {\r\n                                pga: \"0.00000\",\r\n                                pgv: \"0.00000\",\r\n                                intensity: \"-\",\r\n                            },\r\n                        },\r\n                    },\r\n                    chart: {\r\n                        backgroundColor: \"#0ea5e9\",\r\n                        lineWidth: 1,\r\n                        series: {\r\n                            name: \"EHN\",\r\n                            type: \"line\",\r\n                            color: \"#f1f5f9\",\r\n                            data: [],\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            adc: { fullscale: 1, resolution: 1 },\r\n            geophone: { ehz: 1, ehe: 1, ehn: 1 },\r\n            scale: fallbackScale.property(),\r\n        };\r\n        // Some initializations\r\n        this.websocket = null;\r\n        this.prevTs = 0;\r\n    }\r\n\r\n    // WebSocket OnOpen handler\r\n    handleWebsocketOpen = (): void => {\r\n        // Display success message after connection established\r\n        setTimeout(() => {\r\n            const { t } = this.props;\r\n            toast.success(t(\"views.realtime.toasts.websocket_connected\"));\r\n        }, 500);\r\n    };\r\n\r\n    // WebSocket OnClose handler\r\n    handleWebsocketClose = (): void => {\r\n        // Reconnect to server if websocket closed\r\n        // Unless leaving the component, the ref will be {}\r\n        // So we can use instanceof to check if still in component\r\n        if (this.websocket && this.websocket instanceof WebSocket) {\r\n            // setBanner returns error when no arguments passed\r\n            const banner = setBanner();\r\n            this.setState({ banner });\r\n            // Reconnect to server\r\n            this.websocket = websocketByTag({\r\n                tag: \"socket\",\r\n                onData: this.handleWebsocketData,\r\n                onOpen: this.handleWebsocketOpen,\r\n                onClose: this.handleWebsocketClose,\r\n            }) as WebSocket;\r\n        }\r\n    };\r\n\r\n    // WebSocket OnData handler\r\n    handleWebsocketData = (event: MessageEvent): void => {\r\n        const jsonData = JSON.parse(event.data);\r\n        const { adc, geophone, scale } = this.state;\r\n        const banner = setBanner(jsonData, this.prevTs, scale);\r\n        // Get waveform retention time from global config\r\n        const { retention } = this.props.retention;\r\n        const areas = setAreas(\r\n            this.state.areas,\r\n            jsonData,\r\n            this.prevTs,\r\n            retention,\r\n            adc,\r\n            geophone,\r\n            scale\r\n        );\r\n\r\n        this.prevTs = jsonData.ts;\r\n        this.setState({ banner, areas });\r\n    };\r\n\r\n    // Set height of each chart by window height\r\n    setChartHeight = (): void => {\r\n        const { areas } = this.state;\r\n        const innerHeight = window.innerHeight;\r\n        let height = Math.round((innerHeight * 0.6) / areas.length);\r\n        if (height < 150) {\r\n            height = 150;\r\n        }\r\n        this.setState({\r\n            areas: areas.map((item) => ({\r\n                ...item,\r\n                chart: { ...item.chart, height },\r\n            })),\r\n        });\r\n    };\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        // Listen to window resize event\r\n        window.addEventListener(\"resize\", this.setChartHeight);\r\n        this.setChartHeight();\r\n\r\n        // Get ADC, Geophone, Station, scale standard from Redux\r\n        let { adc } = this.props.adc;\r\n        const { resolution } = adc;\r\n        let { geophone } = this.props.geophone;\r\n        const { ehz, ehe, ehn } = geophone;\r\n        const { scale: scaleValue } = this.props.scale;\r\n        let { station } = this.props.station;\r\n\r\n        // Query again from server if value is not set\r\n        if (resolution === -1 || ehz * ehe * ehn === 0) {\r\n            const res = await restfulApiByTag({\r\n                tag: \"station\",\r\n            });\r\n            if (res.data) {\r\n                // Get new formatted state\r\n                geophone = setGeophone(res);\r\n                station = setStation(res);\r\n                adc = setADC(res);\r\n                // Apply to Redux store\r\n                const { updateADC, updateGeophone, updateStation } = this.props;\r\n                updateGeophone && updateGeophone(geophone);\r\n                updateStation && updateStation(station);\r\n                updateADC && updateADC(adc);\r\n            } else {\r\n                // Show error and return if failed\r\n                const { t } = this.props;\r\n                toast.error(t(\"views.realtime.toasts.fetch_metadata_error\"));\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Get scale standard by value\r\n        const { scales } = GLOBAL_CONFIG.app_settings;\r\n        const scale =\r\n            scales\r\n                .find((item) => item.property().value === scaleValue)\r\n                ?.property() || fallbackScale.property();\r\n        // Apply to component state\r\n        this.setState({ adc, geophone, scale });\r\n        // Establish websocket connection\r\n        this.websocket = websocketByTag({\r\n            tag: \"socket\",\r\n            onData: this.handleWebsocketData,\r\n            onOpen: this.handleWebsocketOpen,\r\n            onClose: this.handleWebsocketClose,\r\n        }) as WebSocket;\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        // Remove event listener\r\n        window.removeEventListener(\"resize\", this.setChartHeight);\r\n\r\n        // Close websocket connection when leaving\r\n        if (this.websocket instanceof WebSocket) {\r\n            this.websocket?.close();\r\n            this.websocket = {};\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { areas, banner } = this.state;\r\n        return (\r\n            <View>\r\n                <Header />\r\n                <Sidebar />\r\n\r\n                <Content>\r\n                    <Navbar />\r\n                    <Banner {...banner} />\r\n                    <Container layout=\"none\">\r\n                        {areas.map(({ area, chart }, index) => (\r\n                            <Area key={index} {...area}>\r\n                                <Chart\r\n                                    {...chart}\r\n                                    tooltip={true}\r\n                                    zooming={true}\r\n                                    animation={false}\r\n                                    tickPrecision={1}\r\n                                    tickInterval={1000}\r\n                                />\r\n                            </Area>\r\n                        ))}\r\n                    </Container>\r\n                </Content>\r\n\r\n                <Scroller />\r\n                <Footer />\r\n                <Toaster position=\"top-center\" />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateGeophone,\r\n    updateADC,\r\n    updateStation,\r\n})(withTranslation()(Realtime));\r\n"],"names":["data","interval","acceleration","i","length","push","sensitivity","_step","velocity","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","arr","resolution","fullscale","factor","Math","pow","voltage","ts","date","Date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","concat","res","_res$data$adc","adc","_res$data$geophone","geophone","ehz","ehe","ehn","_ref","tag","onOpen","onData","onClose","onError","_API_CONFIG$find","API_CONFIG","find","config","type","Error","uri","getApiUrl","protocol","window","location","websocket","WebSocket","getBackend","onmessage","onopen","onclose","onerror","Event","message","prevTs","scale","sampleRate","toFixed","label","id","text","format","time","getTimeString","name","obj","gp","_loop","_obj$find","_obj$find$chart$serie","timeDiff","timeSpan","channelData","getVoltage","getVelocity","getAcceleration","srcArr","item","chart","series","newArr","j","resultArr","getQueueArray","setObjectByPath","pgv","reduce","a","b","absA","abs","absB","max","pga","scaleStandard","GLOBAL_CONFIG","app_settings","scales","property","intensity","_res$data","station","network","Realtime","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","handleWebsocketOpen","setTimeout","t","toast","success","handleWebsocketClose","banner","setBanner","setState","websocketByTag","handleWebsocketData","event","jsonData","JSON","parse","_this$state","state","retention","areas","setAreas","setChartHeight","innerHeight","height","round","map","_objectSpread","area","collapse","CollapseMode","COLLAPSE_HIDE","backgroundColor","lineWidth","color","fallbackScale","_createClass","key","_componentDidMount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_scales$find","_geophone","scaleValue","_this$props","_updateADC","_updateGeophone","_updateStation","wrap","_context","prev","next","addEventListener","this","restfulApiByTag","sent","setGeophone","setStation","setADC","updateADC","updateGeophone","updateStation","error","abrupt","stop","apply","arguments","_this$websocket","removeEventListener","close","_this$state2","_jsxs","View","children","_jsx","Header","Sidebar","Content","Navbar","Banner","Container","layout","index","Area","Chart","tooltip","zooming","animation","tickPrecision","tickInterval","Scroller","Footer","Toaster","position","Component","connect","mapStateToProps","withTranslation"],"sourceRoot":""}