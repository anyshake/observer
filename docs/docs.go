// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/history": {
            "post": {
                "description": "Get waveform count data in specified time range, channel and format, the maximum duration of the waveform data to be exported is 24 hours for JSON and 1 hour for SAC",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "application/octet-stream"
                ],
                "summary": "AnyShake Observer waveform history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start timestamp of the waveform data to be queried, in milliseconds (unix timestamp)",
                        "name": "start_time",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "End timestamp of the waveform data to be queried, in milliseconds (unix timestamp)",
                        "name": "end_time",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Format of the waveform data to be queried, ` + "`" + `json` + "`" + `, ` + "`" + `sac` + "`" + ` or ` + "`" + `miniseed` + "`" + `",
                        "name": "format",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Channel of the waveform, ` + "`" + `Z` + "`" + `, ` + "`" + `E` + "`" + ` or ` + "`" + `N` + "`" + `, reuqired when format is ` + "`" + `sac` + "`" + ` and ` + "`" + `miniseed` + "`" + `",
                        "name": "channel",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully exported the waveform data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.HttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/explorer.ExplorerData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Failed to export waveform data due to invalid format or channel",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    },
                    "410": {
                        "description": "Failed to export waveform data due to no data available",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to export waveform data due to failed to read data source",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    }
                }
            }
        },
        "/inventory": {
            "get": {
                "description": "Get SeisComP XML inventory, which contains meta data of the station",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "summary": "AnyShake Observer station inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Format of the inventory, either ` + "`" + `json` + "`" + ` or ` + "`" + `xml` + "`" + `",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get SeisComP XML inventory",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.HttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/mseed": {
            "post": {
                "description": "List MiniSEED data if action is ` + "`" + `show` + "`" + `, or export MiniSEED data in .mseed format if action is ` + "`" + `export` + "`" + `",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "application/octet-stream"
                ],
                "summary": "AnyShake Observer MiniSEED data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Action to be performed, either ` + "`" + `show` + "`" + ` or ` + "`" + `export` + "`" + `",
                        "name": "action",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of MiniSEED file to be exported, end with ` + "`" + `.mseed` + "`" + `",
                        "name": "name",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get list of MiniSEED files",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.HttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/mseed.miniSeedFileInfo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Failed to list or export MiniSEED data due to invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    },
                    "410": {
                        "description": "Failed to export MiniSEED data due to invalid file name or permission denied",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to list or export MiniSEED data due to internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    }
                }
            }
        },
        "/station": {
            "get": {
                "description": "Get Observer station status including system information, memory usage, disk usage, CPU usage, ADC information, geophone information, and location information",
                "produces": [
                    "application/json"
                ],
                "summary": "AnyShake Observer station status",
                "responses": {
                    "200": {
                        "description": "Successfully read station information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.HttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/station.stationInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/trace": {
            "post": {
                "description": "Get list of earthquake events data source and earthquake events from specified data source",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "AnyShake Observer event trace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Use ` + "`" + `show` + "`" + ` to get available sources first, then choose one and request again to get events",
                        "name": "source",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully read the list of earthquake events",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.HttpResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/seisevent.Event"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Failed to read earthquake event list due to invalid data source",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to read earthquake event list due to failed to read data source",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.Sensor": {
            "type": "object",
            "properties": {
                "frequency": {
                    "type": "number"
                },
                "fullscale": {
                    "type": "number"
                },
                "resolution": {
                    "type": "integer"
                },
                "sensitivity": {
                    "type": "number"
                },
                "velocity": {
                    "type": "boolean"
                },
                "vref": {
                    "type": "number"
                }
            }
        },
        "config.Station": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "config.Stream": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string",
                    "maxLength": 3
                },
                "location": {
                    "type": "string",
                    "maxLength": 2
                },
                "network": {
                    "type": "string",
                    "maxLength": 2
                },
                "station": {
                    "type": "string",
                    "maxLength": 5
                }
            }
        },
        "explorer.ExplorerData": {
            "type": "object",
            "properties": {
                "e_axis": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "n_axis": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sample_rate": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                },
                "z_axis": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "mseed.miniSeedFileInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "time": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "integer"
                }
            }
        },
        "response.HttpResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "seisevent.Estimation": {
            "type": "object",
            "properties": {
                "p": {
                    "type": "number"
                },
                "s": {
                    "type": "number"
                }
            }
        },
        "seisevent.Event": {
            "type": "object",
            "properties": {
                "depth": {
                    "type": "number"
                },
                "distance": {
                    "type": "number"
                },
                "estimation": {
                    "$ref": "#/definitions/seisevent.Estimation"
                },
                "event": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "magnitude": {
                    "type": "number"
                },
                "region": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "verfied": {
                    "type": "boolean"
                }
            }
        },
        "station.cpuInfo": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "percent": {
                    "type": "number"
                }
            }
        },
        "station.diskInfo": {
            "type": "object",
            "properties": {
                "free": {
                    "type": "integer"
                },
                "percent": {
                    "type": "number"
                },
                "total": {
                    "type": "integer"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "station.explorerInfo": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "integer"
                },
                "elapsed": {
                    "type": "integer"
                },
                "elevation": {
                    "type": "number"
                },
                "errors": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "received": {
                    "type": "integer"
                },
                "sample_rate": {
                    "type": "integer"
                }
            }
        },
        "station.memoryInfo": {
            "type": "object",
            "properties": {
                "free": {
                    "type": "integer"
                },
                "percent": {
                    "type": "number"
                },
                "total": {
                    "type": "integer"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "station.osInfo": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "distro": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "uptime": {
                    "type": "integer"
                }
            }
        },
        "station.stationInfo": {
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/station.cpuInfo"
                },
                "disk": {
                    "$ref": "#/definitions/station.diskInfo"
                },
                "explorer": {
                    "$ref": "#/definitions/station.explorerInfo"
                },
                "memory": {
                    "$ref": "#/definitions/station.memoryInfo"
                },
                "os": {
                    "$ref": "#/definitions/station.osInfo"
                },
                "sensor": {
                    "$ref": "#/definitions/config.Sensor"
                },
                "station": {
                    "$ref": "#/definitions/config.Station"
                },
                "stream": {
                    "$ref": "#/definitions/config.Stream"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "AnyShake Observer APIv1",
	Description:      "This is APIv1 documentation for AnyShake Observer, please set `server_settings.debug` to `false` in `config.json` when deploying to production environment in case of any security issues.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
