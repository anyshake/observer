// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "In restricted mode, the client must log in to access other APIs. This API is used to checks the server's authentication status, issues an RSA public key for credential encryption, generates a captcha, authenticates the client, and signs or refreshes the JWT token. This API requires a valid JWT token if action is ` + "`" + `refresh` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "summary": "User Authentication",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Specifies the action to be performed. Use ` + "`" + `inspect` + "`" + ` to check the server's restriction status, ` + "`" + `preauth` + "`" + ` to get a Base64 RSA public key in PEM format and generate a Base64 captcha PNG image, ` + "`" + `login` + "`" + ` to authenticate the client using encrypted credentials, and ` + "`" + `refresh` + "`" + ` to refresh the JWT token.",
                        "name": "action",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A unique string used to prevent replay attacks, required for the ` + "`" + `login` + "`" + ` action and left empty for other actions. The nonce is the SHA-1 hash of the RSA public key from the pre-authentication stage and becomes invalid once the request is sent. It also expires if unused within the time-to-live (TTL) period, which is set during the pre-authentication stage.",
                        "name": "nonce",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encrypted credential using the RSA public key, required for the ` + "`" + `login` + "`" + ` action and left empty for other actions. The decrypted credential is a JSON object that includes the username, password, captcha ID, and captcha solution. Example: ` + "`" + `{ username: admin, password: admin, captcha_id: 123, captcha_solution: abc }` + "`" + `.",
                        "name": "credential",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bearer JWT token, only required for the ` + "`" + `refresh` + "`" + ` action.",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {}
            }
        },
        "/history": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get seismic waveform data from database in specified time range, channel and format. This API supports 1 hour of maximum duration of the waveform data to be queried. This API requires a valid JWT token if the server is in restricted mode.",
                "produces": [
                    "application/json",
                    "application/octet-stream"
                ],
                "summary": "Waveform History",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start time of the waveform to be queried, unix timestamp format in milliseconds.",
                        "name": "start_time",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "End time of the waveform to be queried, unix timestamp format in milliseconds.",
                        "name": "end_time",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Set output format of the waveform data, available options are ` + "`" + `json` + "`" + `, ` + "`" + `sac` + "`" + `, and ` + "`" + `miniseed` + "`" + `.",
                        "name": "format",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Channel of the waveform, available options are ` + "`" + `Z` + "`" + `, ` + "`" + `E` + "`" + ` or ` + "`" + `N` + "`" + ` (in uppercase), only reuqired when output format is set to ` + "`" + `sac` + "`" + ` and ` + "`" + `miniseed` + "`" + `.",
                        "name": "channel",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bearer JWT token, only required when the server is in restricted mode.",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {}
            }
        },
        "/inventory": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get SeisComP XML inventory, which contains meta data of the station. This API requires a valid JWT token if the server is in restricted mode.",
                "produces": [
                    "application/json",
                    " application/xml"
                ],
                "summary": "Station Inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Format of the inventory, available options are ` + "`" + `json` + "`" + ` or ` + "`" + `xml` + "`" + `",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer JWT token, only required when the server is in restricted mode.",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {}
            }
        },
        "/mseed": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API returns a list of MiniSEED files or exports a specific MiniSEED file. This API requires a valid JWT token if the server is in restricted mode.",
                "produces": [
                    "application/json",
                    "application/octet-stream"
                ],
                "summary": "MiniSEED Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Action to be performed, Use ` + "`" + `list` + "`" + ` to get list of MiniSEED files, ` + "`" + `export` + "`" + ` to export a specific MiniSEED file.",
                        "name": "action",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A valid filename of the MiniSEED file to be exported, only required when action is ` + "`" + `export` + "`" + `.",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bearer JWT token, only required when the server is in restricted mode.",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {}
            }
        },
        "/station": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Observer station status including system information, memory usage, disk usage, CPU usage, ADC information, geophone information, and location information. This API requires a valid JWT token if the server is in restricted mode.",
                "produces": [
                    "application/json"
                ],
                "summary": "Station Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT token, only required when the server is in restricted mode.",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {}
            }
        },
        "/trace": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API retrieves seismic events from the specified data source, including essential information such as event time, location, magnitude, depth and estimated distance and arrival time from the station. This API requires a valid JWT token if the server is in restricted mode.",
                "produces": [
                    "application/json"
                ],
                "summary": "Seismic Trace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Use ` + "`" + `list` + "`" + ` to get available sources first, then choose one and request again to get events",
                        "name": "source",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer JWT token, only required when the server is in restricted mode.",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {}
            }
        },
        "/user": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API is used to manage user accounts, including creating, removing, and editing user profiles. This API only available in restricted mode and requires a valid JWT token.",
                "produces": [
                    "application/json"
                ],
                "summary": "User Management",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Specifies the action to be performed. Use ` + "`" + `preauth` + "`" + ` to get a Base64 RSA public key in PEM format, ` + "`" + `profile` + "`" + ` to get profile of current user, ` + "`" + `list` + "`" + ` to get list of all users (admin only), ` + "`" + `create` + "`" + ` to create a new user (admin only), ` + "`" + `remove` + "`" + ` to remove a user (admin only), and ` + "`" + `edit` + "`" + ` to edit a user (admin only).",
                        "name": "action",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A unique string used to prevent replay attacks, required for the ` + "`" + `create` + "`" + `, ` + "`" + `remove` + "`" + `, ` + "`" + `edit` + "`" + ` actions and left empty for other actions. The nonce is the SHA-1 hash of the RSA public key from the pre-authentication stage and becomes invalid once the request is sent. It also expires if unused within the time-to-live (TTL) period, which is set during the pre-authentication stage.",
                        "name": "nonce",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The user ID to be removed or edited, required for the ` + "`" + `remove` + "`" + ` and ` + "`" + `edit` + "`" + ` actions and left empty for other actions. The user ID is encrypted with the RSA public key.",
                        "name": "user_id",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Specifies whether the user is an administrator, required for the ` + "`" + `create` + "`" + ` and ` + "`" + `edit` + "`" + ` actions and set to false in other actions.",
                        "name": "admin",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The username of the user to be created or edited, required for the ` + "`" + `create` + "`" + ` and ` + "`" + `edit` + "`" + ` actions and left empty for other actions. The username is encrypted with the RSA public key.",
                        "name": "username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The password of the user to be created or edited, required for the ` + "`" + `create` + "`" + ` and ` + "`" + `edit` + "`" + ` actions and left empty for other actions. The password is encrypted with the RSA public key.",
                        "name": "password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bearer JWT token.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "AnyShake Observer API v1",
	Description:      "This is API v1 documentation for AnyShake Observer, please set `server_settings.debug` to `false` in `config.json` when deploying to production environment in case of any security issues.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
